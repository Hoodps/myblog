---
layout: post
title:  "pandas"
date:   2015-11-07 22:43:22
author: Hoodps
categories: matplotlib
---


numpy简介
	In [1]: import numpy as np

	In [2]: data = np.array([1,2,3,4])

	In [3]: data
	Out[3]: array([1, 2, 3, 4])

	In [4]: data.shape
	Out[4]: (4,)

	In [5]: data.dtype
	Out[5]: dtype('int32')

	In [6]: data[1]
	Out[6]: 2

	In [7]: data[1] = 8

	In [8]: data
	Out[8]: array([1, 8, 3, 4])

	In [9]: data1 = np.array([[1,2,3,4,5],[2,3,4,56,7,7]])

	In [10]: data1
	Out[10]: array([[1, 2, 3, 4, 5], [2, 3, 4, 56, 7, 7]], dtype=object)

	In [11]: data1.shape
	Out[11]: (2,)

	In [13]: data.shape
	Out[13]: (4,)

	In [14]: data1.shape
	Out[14]: (2,)

	In [16]: data2 = np.array([[1,2,3,4,5],[6,7,8,9,12]])

	In [17]: data2.shape
	Out[17]: (2, 5)

	In [19]: data2[1,3]
	Out[19]: 9

	In [20]: range(10)
	Out[20]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

	In [22]: np.arange(10)
	Out[22]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

	In [23]: np.arange(5,15)
	Out[23]: array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14])

	In [24]: data = np.arange(10)

	In [25]: data
	Out[25]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

	In [26]: data.reshape(2,5)
	Out[26]: 
	array([[0, 1, 2, 3, 4],
	       [5, 6, 7, 8, 9]])

	In [27]: data2 =data.reshape(2,5)

	In [28]: data2
	Out[28]: 
	array([[0, 1, 2, 3, 4],
	       [5, 6, 7, 8, 9]])

	In [29]: data
	Out[29]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

	In [30]: data[4] = 0

	In [31]: data
	Out[31]: array([0, 1, 2, 3, 0, 5, 6, 7, 8, 9])

	In [32]: data2
	Out[32]: 
	array([[0, 1, 2, 3, 0],
	       [5, 6, 7, 8, 9]])

	In [33]: np.zeros((2,2))
	Out[33]: 
	array([[ 0.,  0.],
	       [ 0.,  0.]])

	In [35]: np.ones((2,3,3))
	Out[35]: 
	array([[[ 1.,  1.,  1.],
	        [ 1.,  1.,  1.],
	        [ 1.,  1.,  1.]],

	       [[ 1.,  1.,  1.],
	        [ 1.,  1.,  1.],
	        [ 1.,  1.,  1.]]])

	In [36]: np.eye(4)
	Out[36]: 
	array([[ 1.,  0.,  0.,  0.],
	       [ 0.,  1.,  0.,  0.],
	       [ 0.,  0.,  1.,  0.],
	       [ 0.,  0.,  0.,  1.]])

	In [37]: np.arange(16).reshape(4,4)
	Out[37]: 
	array([[ 0,  1,  2,  3],
	       [ 4,  5,  6,  7],
	       [ 8,  9, 10, 11],
	       [12, 13, 14, 15]])

	In [38]: data = np.arange(100, step = 10)

	In [39]: data
	Out[39]: array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])

	In [40]: data[2]
	Out[40]: 20

	In [41]: data[2:5]
	Out[41]: array([20, 30, 40])

	In [42]: data[:3]
	Out[42]: array([ 0, 10, 20])

	In [43]: data[5:]
	Out[43]: array([50, 60, 70, 80, 90])

	In [44]: data[5:] = -1

	In [45]: data
	Out[45]: array([ 0, 10, 20, 30, 40, -1, -1, -1, -1, -1])

	In [47]: data = np.arange(16).reshape(4,4)

	In [48]: data
	Out[48]: 
	array([[ 0,  1,  2,  3],
	       [ 4,  5,  6,  7],
	       [ 8,  9, 10, 11],
	       [12, 13, 14, 15]])

	In [49]: data[1]
	Out[49]: array([4, 5, 6, 7])

	In [50]: data[1:3]
	Out[50]: 
	array([[ 4,  5,  6,  7],
	       [ 8,  9, 10, 11]])

	In [51]: data[:,2:4]
	Out[51]: 
	array([[ 2,  3],
	       [ 6,  7],
	       [10, 11],
	       [14, 15]])

	In [52]: data[1:3,2:4]
	Out[52]: 
	array([[ 6,  7],
	       [10, 11]])

	In [53]: data
	Out[53]: 
	array([[ 0,  1,  2,  3],
	       [ 4,  5,  6,  7],
	       [ 8,  9, 10, 11],
	       [12, 13, 14, 15]])

	In [55]: data[[1,3],[2,3]]
	Out[55]: array([ 6, 15])

	In [56]: data
	Out[56]: 
	array([[ 0,  1,  2,  3],
	       [ 4,  5,  6,  7],
	       [ 8,  9, 10, 11],
	       [12, 13, 14, 15]])

	In [57]: data > 10
	Out[57]: 
	array([[False, False, False, False],
	       [False, False, False, False],
	       [False, False, False,  True],
	       [ True,  True,  True,  True]], dtype=bool)

	In [58]: index = data > 10

	In [59]: index
	Out[59]: 
	array([[False, False, False, False],
	       [False, False, False, False],
	       [False, False, False,  True],
	       [ True,  True,  True,  True]], dtype=bool)

	In [60]: data[index]
	Out[60]: array([11, 12, 13, 14, 15])

	In [61]: data[data > 10]
	Out[61]: array([11, 12, 13, 14, 15])

	In [62]: data[data % 2 == 0]
	Out[62]: array([ 0,  2,  4,  6,  8, 10, 12, 14])

	In [63]: x = np.arange(1,5).reshape(2,2)

	In [64]: x
	Out[64]: 
	array([[1, 2],
	       [3, 4]])

	In [65]: y = np.arange(5,9).reshape(2,2)

	In [66]: y
	Out[66]: 
	array([[5, 6],
	       [7, 8]])

	In [67]: x + y
	Out[67]: 
	array([[ 6,  8],
	       [10, 12]])

	In [68]: np.add(x,y)
	Out[68]: 
	array([[ 6,  8],
	       [10, 12]])

	In [69]: x - y
	Out[69]: 
	array([[-4, -4],
	       [-4, -4]])

	In [70]: x * y
	Out[70]: 
	array([[ 5, 12],
	       [21, 32]])

	In [71]: x.dot(y)
	Out[71]: 
	array([[19, 22],
	       [43, 50]])

	In [73]: x = np.array(x, dtype = float)

	In [74]: x
	Out[74]: 
	array([[ 1.,  2.],
	       [ 3.,  4.]])

	In [75]: y = np.array(y, dtype = float)

	In [76]: y
	Out[76]: 
	array([[ 5.,  6.],
	       [ 7.,  8.]])

	In [77]: x / y
	Out[77]: 
	array([[ 0.2       ,  0.33333333],
	       [ 0.42857143,  0.5       ]])

	In [79]: np.sqrt(x)
	Out[79]: 
	array([[ 1.        ,  1.41421356],
	       [ 1.73205081,  2.        ]])

	In [80]: x.T
	Out[80]: 
	array([[ 1.,  3.],
	       [ 2.,  4.]])

	In [81]: np.linspace(1,10)
	Out[81]: 
	array([  1.        ,   1.18367347,   1.36734694,   1.55102041,
	         1.73469388,   1.91836735,   2.10204082,   2.28571429,
	         2.46938776,   2.65306122,   2.83673469,   3.02040816,
	         3.20408163,   3.3877551 ,   3.57142857,   3.75510204,
	         3.93877551,   4.12244898,   4.30612245,   4.48979592,
	         4.67346939,   4.85714286,   5.04081633,   5.2244898 ,
	         5.40816327,   5.59183673,   5.7755102 ,   5.95918367,
	         6.14285714,   6.32653061,   6.51020408,   6.69387755,
	         6.87755102,   7.06122449,   7.24489796,   7.42857143,
	         7.6122449 ,   7.79591837,   7.97959184,   8.16326531,
	         8.34693878,   8.53061224,   8.71428571,   8.89795918,
	         9.08163265,   9.26530612,   9.44897959,   9.63265306,
	         9.81632653,  10.        ])

	In [82]: x = np.linspace(0, 2 * np.pi, num = 50)

	In [83]: x
	Out[83]: 
	array([ 0.        ,  0.12822827,  0.25645654,  0.38468481,  0.51291309,
	        0.64114136,  0.76936963,  0.8975979 ,  1.02582617,  1.15405444,
	        1.28228272,  1.41051099,  1.53873926,  1.66696753,  1.7951958 ,
	        1.92342407,  2.05165235,  2.17988062,  2.30810889,  2.43633716,
	        2.56456543,  2.6927937 ,  2.82102197,  2.94925025,  3.07747852,
	        3.20570679,  3.33393506,  3.46216333,  3.5903916 ,  3.71861988,
	        3.84684815,  3.97507642,  4.10330469,  4.23153296,  4.35976123,
	        4.48798951,  4.61621778,  4.74444605,  4.87267432,  5.00090259,
	        5.12913086,  5.25735913,  5.38558741,  5.51381568,  5.64204395,
	        5.77027222,  5.89850049,  6.02672876,  6.15495704,  6.28318531])

	In [84]: y = np.sin(x)

	In [85]: y
	Out[85]: 
	array([  0.00000000e+00,   1.27877162e-01,   2.53654584e-01,
	         3.75267005e-01,   4.90717552e-01,   5.98110530e-01,
	         6.95682551e-01,   7.81831482e-01,   8.55142763e-01,
	         9.14412623e-01,   9.58667853e-01,   9.87181783e-01,
	         9.99486216e-01,   9.95379113e-01,   9.74927912e-01,
	         9.38468422e-01,   8.86599306e-01,   8.20172255e-01,
	         7.40277997e-01,   6.48228395e-01,   5.45534901e-01,
	         4.33883739e-01,   3.15108218e-01,   1.91158629e-01,
	         6.40702200e-02,  -6.40702200e-02,  -1.91158629e-01,
	        -3.15108218e-01,  -4.33883739e-01,  -5.45534901e-01,
	        -6.48228395e-01,  -7.40277997e-01,  -8.20172255e-01,
	        -8.86599306e-01,  -9.38468422e-01,  -9.74927912e-01,
	        -9.95379113e-01,  -9.99486216e-01,  -9.87181783e-01,
	        -9.58667853e-01,  -9.14412623e-01,  -8.55142763e-01,
	        -7.81831482e-01,  -6.95682551e-01,  -5.98110530e-01,
	        -4.90717552e-01,  -3.75267005e-01,  -2.53654584e-01,
	        -1.27877162e-01,  -2.44929360e-16])

	In [86]: 


pandas快速入门一

	In [1]: import pandas as pd

	In [2]: import numpy as np

	In [3]: s = pd.Series([1,3,5,np.NaN,8,4])

	In [4]: s
	Out[4]: 
	0    1.0
	1    3.0
	2    5.0
	3    NaN
	4    8.0
	5    4.0
	dtype: float64

	In [5]: datas = pd.date_range('20160301', periods=6)

	In [6]: datas
	Out[6]: 
	DatetimeIndex(['2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',
	               '2016-03-05', '2016-03-06'],
	              dtype='datetime64[ns]', freq='D')

	In [7]: data = pd.DataFrame(np.random.randn(6,4),index=datas,columns=list('ABCD'))

	In [8]: data
	Out[8]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [9]: data.shape
	Out[9]: (6, 4)

	In [10]: data.values
	Out[10]: 
	array([[-0.62433955,  0.17650142,  0.31809063, -0.74214014],
	       [-1.34344471,  0.12547529, -0.70637037,  0.40065022],
	       [-0.46541417, -1.70582394,  0.21001939,  0.13399954],
	       [ 0.69190294,  0.21381714,  0.52862172, -0.13500436],
	       [-0.90049388, -0.12345084, -0.41196425, -0.26265748],
	       [ 0.65110046,  0.32090508,  1.44738042,  0.03172858]])

	In [11]: d = {'A':1,'B':pd.Timestamp('20160301'),'C':range(4),'D':np.arange(4)}

	In [12]: d
	Out[12]: 
	{'A': 1,
	 'B': Timestamp('2016-03-01 00:00:00'),
	 'C': [0, 1, 2, 3],
	 'D': array([0, 1, 2, 3])}

	In [13]: df = pd.DataFrame(d)

	In [14]: df
	Out[14]: 
	   A          B  C  D
	0  1 2016-03-01  0  0
	1  1 2016-03-01  1  1
	2  1 2016-03-01  2  2
	3  1 2016-03-01  3  3


	In [16]: df.dtypes
	Out[16]: 
	A             int64
	B    datetime64[ns]
	C             int64
	D             int32
	dtype: object

	In [17]: df.A
	Out[17]: 
	0    1
	1    1
	2    1
	3    1
	Name: A, dtype: int64

	In [18]: df.B
	Out[18]: 
	0   2016-03-01
	1   2016-03-01
	2   2016-03-01
	3   2016-03-01
	Name: B, dtype: datetime64[ns]

	In [19]: type(df.B)
	Out[19]: pandas.core.series.Series

	In [20]: data
	Out[20]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [21]: data.head()
	Out[21]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657

	In [22]: data.head(2)
	Out[22]: 
	                   A         B         C        D
	2016-03-01 -0.624340  0.176501  0.318091 -0.74214
	2016-03-02 -1.343445  0.125475 -0.706370  0.40065

	In [23]: data.tail()
	Out[23]: 
	                   A         B         C         D
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [24]: data.tail(3)
	Out[24]: 
	                   A         B         C         D
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [25]: data.index
	Out[25]: 
	DatetimeIndex(['2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',
	               '2016-03-05', '2016-03-06'],
	              dtype='datetime64[ns]', freq='D')

	In [26]: data.columns
	Out[26]: Index([u'A', u'B', u'C', u'D'], dtype='object')

	In [27]: data.values
	Out[27]: 
	array([[-0.62433955,  0.17650142,  0.31809063, -0.74214014],
	       [-1.34344471,  0.12547529, -0.70637037,  0.40065022],
	       [-0.46541417, -1.70582394,  0.21001939,  0.13399954],
	       [ 0.69190294,  0.21381714,  0.52862172, -0.13500436],
	       [-0.90049388, -0.12345084, -0.41196425, -0.26265748],
	       [ 0.65110046,  0.32090508,  1.44738042,  0.03172858]])

	In [28]: data.describe()
	Out[28]: 
	              A         B         C         D
	count  6.000000  6.000000  6.000000  6.000000
	mean  -0.331781 -0.165429  0.230963 -0.095571
	std    0.832386  0.768956  0.757397  0.390555
	min   -1.343445 -1.705824 -0.706370 -0.742140
	25%   -0.831455 -0.061219 -0.256468 -0.230744
	50%   -0.544877  0.150988  0.264055 -0.051638
	75%    0.371972  0.204488  0.475989  0.108432
	max    0.691903  0.320905  1.447380  0.400650

	In [29]: data.T
	Out[29]: 
	   2016-03-01  2016-03-02  2016-03-03  2016-03-04  2016-03-05  2016-03-06
	A   -0.624340   -1.343445   -0.465414    0.691903   -0.900494    0.651100
	B    0.176501    0.125475   -1.705824    0.213817   -0.123451    0.320905
	C    0.318091   -0.706370    0.210019    0.528622   -0.411964    1.447380
	D   -0.742140    0.400650    0.134000   -0.135004   -0.262657    0.031729

	In [30]: data.shape
	Out[30]: (6, 4)

	In [31]: data.T.shape
	Out[31]: (4, 6)

	In [32]: data.sort_index(axis=1)
	Out[32]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [33]: data.sort_index(axis=0, ascending=False)
	Out[33]: 
	                   A         B         C         D
	2016-03-06  0.651100  0.320905  1.447380  0.031729
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140

	In [34]: data.sort_values(by='A')
	Out[34]: 
	                   A         B         C         D
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-06  0.651100  0.320905  1.447380  0.031729
	2016-03-04  0.691903  0.213817  0.528622 -0.135004

	In [35]: data['A']
	Out[35]: 
	2016-03-01   -0.624340
	2016-03-02   -1.343445
	2016-03-03   -0.465414
	2016-03-04    0.691903
	2016-03-05   -0.900494
	2016-03-06    0.651100
	Freq: D, Name: A, dtype: float64

	In [36]: data.A
	Out[36]: 
	2016-03-01   -0.624340
	2016-03-02   -1.343445
	2016-03-03   -0.465414
	2016-03-04    0.691903
	2016-03-05   -0.900494
	2016-03-06    0.651100
	Freq: D, Name: A, dtype: float64

	In [37]: data[2:4]
	Out[37]: 
	                   A         B         C         D
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004

	

	In [40]: data.loc['20160302':'20160305']
	Out[40]: 
	                   A         B         C         D
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657

	In [41]: data.iloc[2:4]
	Out[41]: 
	                   A         B         C         D
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004

	

	In [43]: data.loc[:,['B','C']]
	Out[43]: 
	                   B         C
	2016-03-01  0.176501  0.318091
	2016-03-02  0.125475 -0.706370
	2016-03-03 -1.705824  0.210019
	2016-03-04  0.213817  0.528622
	2016-03-05 -0.123451 -0.411964
	2016-03-06  0.320905  1.447380

	

	In [46]: data.at[pd.Timestamp('20160302'), 'B']
	Out[46]: 0.12547528826127502

	In [47]: data.iloc[1]
	Out[47]: 
	A   -1.343445
	B    0.125475
	C   -0.706370
	D    0.400650
	Name: 2016-03-02 00:00:00, dtype: float64

	In [48]: data.iloc[1:3]
	Out[48]: 
	                   A         B         C        D
	2016-03-02 -1.343445  0.125475 -0.706370  0.40065
	2016-03-03 -0.465414 -1.705824  0.210019  0.13400

	In [49]: data.iloc[1:3,2:4]
	Out[49]: 
	                   C        D
	2016-03-02 -0.706370  0.40065
	2016-03-03  0.210019  0.13400

	In [50]: data.iloc[:, 1:3]
	Out[50]: 
	                   B         C
	2016-03-01  0.176501  0.318091
	2016-03-02  0.125475 -0.706370
	2016-03-03 -1.705824  0.210019
	2016-03-04  0.213817  0.528622
	2016-03-05 -0.123451 -0.411964
	2016-03-06  0.320905  1.447380

	In [51]: data.iloc[1,1]
	Out[51]: 0.12547528826127502

	In [52]: data.iat[1,1]
	Out[52]: 0.12547528826127502

	In [53]: %timeit df.iloc[1,1]
	1000 loops, best of 3: 186 µs per loop

	In [54]: %timeit df.iat[1,1]
	The slowest run took 10.38 times longer than the fastest. This could mean that an intermediate result is being cached.
	100000 loops, best of 3: 11.9 µs per loop

	In [55]: data[data.A > 0]
	Out[55]: 
	                   A         B         C         D
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [56]: data[data > 0]
	Out[56]: 
	                   A         B         C         D
	2016-03-01       NaN  0.176501  0.318091       NaN
	2016-03-02       NaN  0.125475       NaN  0.400650
	2016-03-03       NaN       NaN  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622       NaN
	2016-03-05       NaN       NaN       NaN       NaN
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [57]: data2 = data.copy()

	In [58]: data2
	Out[58]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [59]: tag = ['a'] * 2 + ['b'] * 2 + ['c'] * 2

	In [60]: data2['TAG'] = tag

	In [61]: data2
	Out[61]: 
	                   A         B         C         D TAG
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140   a
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650   a
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000   b
	2016-03-04  0.691903  0.213817  0.528622 -0.135004   b
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657   c
	2016-03-06  0.651100  0.320905  1.447380  0.031729   c

	In [62]: data2[data2.TAG.isin(['a','c'])]
	Out[62]: 
	                   A         B         C         D TAG
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140   a
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650   a
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657   c
	2016-03-06  0.651100  0.320905  1.447380  0.031729   c

	In [63]: data
	Out[63]: 
	                   A         B         C         D
	2016-03-01 -0.624340  0.176501  0.318091 -0.742140
	2016-03-02 -1.343445  0.125475 -0.706370  0.400650
	2016-03-03 -0.465414 -1.705824  0.210019  0.134000
	2016-03-04  0.691903  0.213817  0.528622 -0.135004
	2016-03-05 -0.900494 -0.123451 -0.411964 -0.262657
	2016-03-06  0.651100  0.320905  1.447380  0.031729

	In [64]:   

pandas 二

	In [1]: import pandas as pd

	In [2]: import numpy as np

	In [3]: dates = pd.date_range('20160301', periods=6)

	In [4]: df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))

	In [5]: df
	Out[5]: 
	                   A         B         C         D
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016
	2016-03-02  1.040042 -0.002974  0.854097  0.289762
	2016-03-03 -0.002127  0.396345 -1.701664 -1.004004
	2016-03-04  1.324705  1.022336  0.632903  1.575529
	2016-03-05  0.681141 -0.097687  0.815335  1.398067
	2016-03-06  1.287652 -0.860549  0.137752 -1.318273

	In [6]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])

	In [7]: df1
	Out[7]: 
	                   A         B         C         D   E
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016 NaN
	2016-03-02  1.040042 -0.002974  0.854097  0.289762 NaN
	2016-03-03 -0.002127  0.396345 -1.701664 -1.004004 NaN
	2016-03-04  1.324705  1.022336  0.632903  1.575529 NaN


	In [9]: df1.loc[dates[1:3], 'E'] = 2

	In [10]: df1
	Out[10]: 
	                   A         B         C         D    E
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016  NaN
	2016-03-02  1.040042 -0.002974  0.854097  0.289762  2.0
	2016-03-03 -0.002127  0.396345 -1.701664 -1.004004  2.0
	2016-03-04  1.324705  1.022336  0.632903  1.575529  NaN


	In [12]: df1.dropna()
	Out[12]: 
	                   A         B         C         D    E
	2016-03-02  1.040042 -0.002974  0.854097  0.289762  2.0
	2016-03-03 -0.002127  0.396345 -1.701664 -1.004004  2.0

	In [13]: df1.fillna(value=5)
	Out[13]: 
	                   A         B         C         D    E
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016  5.0
	2016-03-02  1.040042 -0.002974  0.854097  0.289762  2.0
	2016-03-03 -0.002127  0.396345 -1.701664 -1.004004  2.0
	2016-03-04  1.324705  1.022336  0.632903  1.575529  5.0

	In [14]: pd.isnull(df1)
	Out[14]: 
	                A      B      C      D      E
	2016-03-01  False  False  False  False   True
	2016-03-02  False  False  False  False  False
	2016-03-03  False  False  False  False  False
	2016-03-04  False  False  False  False   True

	In [15]: pd.isnull(df1).any()
	Out[15]: 
	A    False
	B    False
	C    False
	D    False
	E     True
	dtype: bool

	In [16]: pd.isnull(df1).any().any()
	Out[16]: True

	In [17]: df1.mean()
	Out[17]: 
	A    0.330738
	B    0.674993
	C   -0.418680
	D    0.370076
	E    2.000000
	dtype: float64

	In [18]: df1.mean(axis=1)
	Out[18]: 
	2016-03-01   -0.149111
	2016-03-02    0.836185
	2016-03-03   -0.062290
	2016-03-04    1.138868
	Freq: D, dtype: float64

	In [19]: df1.cumsum()
	Out[19]: 
	                   A         B         C         D    E
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016  NaN
	2016-03-02  0.000375  1.281290 -0.605961  0.908778  2.0
	2016-03-03 -0.001752  1.677635 -2.307625 -0.095226  4.0
	2016-03-04  1.322953  2.699971 -1.674722  1.480303  NaN

	In [20]: 

	In [20]: df.apply(np.cumsum)
	Out[20]: 
	                   A         B         C         D
	2016-03-01 -1.039667  1.284263 -1.460058  0.619016
	2016-03-02  0.000375  1.281290 -0.605961  0.908778
	2016-03-03 -0.001752  1.677635 -2.307625 -0.095226
	2016-03-04  1.322953  2.699971 -1.674722  1.480303
	2016-03-05  2.004093  2.602284 -0.859387  2.878370
	2016-03-06  3.291746  1.741735 -0.721635  1.560097

	In [21]: df.apply(lambda x : x.max() - x.min())
	Out[21]: 
	A    2.364372
	B    2.144812
	C    2.555761
	D    2.893802
	dtype: float64

	In [22]: s = pd.Series(np.random.randint(10, 20, size=20))

	In [23]: s
	Out[23]: 
	0     17
	1     14
	2     15
	3     11
	4     15
	5     12
	6     18
	7     15
	8     13
	9     18
	10    17
	11    14
	12    15
	13    16
	14    17
	15    17
	16    19
	17    10
	18    16
	19    18
	dtype: int32

	In [24]: s.value_counts()
	Out[24]: 
	17    4
	15    4
	18    3
	16    2
	14    2
	19    1
	13    1
	12    1
	11    1
	10    1
	dtype: int64

	In [25]: s.mode()
	Out[25]: 
	0    15
	1    17
	dtype: int32

	In [26]: df = pd.DataFrame(np.random.randn(10,4), columns=list('ABCD'))

	In [27]: df
	Out[27]: 
	          A         B         C         D
	0  1.054763  0.799920 -0.812351 -1.950376
	1  0.051293 -0.487239  0.300359 -0.087769
	2 -0.254453  0.073590  0.444605 -1.023849
	3 -0.645343 -1.688043  0.040056  0.717392
	4  1.148302  0.899384 -0.884464  0.625496
	5 -0.618098 -1.921999 -0.746187  0.443181
	6 -0.209700 -0.180407  0.428848  1.052376
	7 -0.519014 -1.477364  0.572162 -1.185579
	8 -0.339327 -2.110540  0.206299 -1.401979
	9  1.827993 -0.487337  0.192049  1.081773

	In [28]: df.iloc[:3]
	Out[28]: 
	          A         B         C         D
	0  1.054763  0.799920 -0.812351 -1.950376
	1  0.051293 -0.487239  0.300359 -0.087769
	2 -0.254453  0.073590  0.444605 -1.023849

	In [29]: df.iloc[3:7]
	Out[29]: 
	          A         B         C         D
	3 -0.645343 -1.688043  0.040056  0.717392
	4  1.148302  0.899384 -0.884464  0.625496
	5 -0.618098 -1.921999 -0.746187  0.443181
	6 -0.209700 -0.180407  0.428848  1.052376

	In [30]: df.iloc[7:]
	Out[30]: 
	          A         B         C         D
	7 -0.519014 -1.477364  0.572162 -1.185579
	8 -0.339327 -2.110540  0.206299 -1.401979
	9  1.827993 -0.487337  0.192049  1.081773

	In [31]: df1 = pd.concat([df.iloc[:3], df.iloc[3:7], df.iloc[7:]])

	In [32]: df1
	Out[32]: 
	          A         B         C         D
	0  1.054763  0.799920 -0.812351 -1.950376
	1  0.051293 -0.487239  0.300359 -0.087769
	2 -0.254453  0.073590  0.444605 -1.023849
	3 -0.645343 -1.688043  0.040056  0.717392
	4  1.148302  0.899384 -0.884464  0.625496
	5 -0.618098 -1.921999 -0.746187  0.443181
	6 -0.209700 -0.180407  0.428848  1.052376
	7 -0.519014 -1.477364  0.572162 -1.185579
	8 -0.339327 -2.110540  0.206299 -1.401979
	9  1.827993 -0.487337  0.192049  1.081773

	In [33]: df == df1
	Out[33]: 
	      A     B     C     D
	0  True  True  True  True
	1  True  True  True  True
	2  True  True  True  True
	3  True  True  True  True
	4  True  True  True  True
	5  True  True  True  True
	6  True  True  True  True
	7  True  True  True  True
	8  True  True  True  True
	9  True  True  True  True

	In [34]: (df == df1).all()
	Out[34]: 
	A    True
	B    True
	C    True
	D    True
	dtype: bool

	In [35]: (df == df1).all().all()
	Out[35]: True

	In [36]: left = pd.DataFrame({'key':['foo','foo'], 'lval':[1,2]})

	In [37]: right = pd.DataFrame({'key':['foo','foo'], 'lval':[4,5]})

	In [38]: left
	Out[38]: 
	   key  lval
	0  foo     1
	1  foo     2

	In [39]: right
	Out[39]: 
	   key  lval
	0  foo     4
	1  foo     5

	In [40]: pd.merge(left, right, on='key')
	Out[40]: 
	   key  lval_x  lval_y
	0  foo       1       4
	1  foo       1       5
	2  foo       2       4
	3  foo       2       5

	In [41]:    